<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    
      <title>javac - Java programming language compiler</title>

  </head>

  <body>
<!-- BEGIN A2 COMPONENT V.1 -->
<div class="a2" id="a2v1">
<div class="a2w1"><div class="a2w2"><div class="a2w3"><div class="a2w4">
<div class="a2topiclinks">

<ul id="mtopics">
<li id="mtopic1"><a id="glink1" class="tpclink a2menu" title="See Oracle Technology Network" href="http://oracle.com/technology">Oracle Technology Network</a></li>
<li id="mtopic1"><a id="glink1" class="tpclink a2menu" title="Software Downloads" href="http://www.oracle.com/technology/software/index.html">Software Downloads</a></li>
<li id="mtopic2"><a id="glink2" class="tpclink a2menu" title="See All Documentation" href="http://www.oracle.com/technology/documentation/index.html">Documentation</a></li>
</ul>

<div class="a2search">
<a href="../../../../../search.html" target="_blank">Search</a>
</div>

</div>
</div></div></div></div>
</div></div>
<!-- END A2 COMPONENT V.1 -->

<div class="a0 a0v1" id="a0v1">

<!-- BEGIN SEPARATOR -->
<div class="hr"><hr /></div>
<!-- END SEPARATOR -->

<!-- ============ -->
<!-- MAIN CONTENT -->
<!-- ============ -->
    <div class="smallpagetitle"><h1>javac - Java programming language compiler</h1></div>

    <ul>
      <li><a href="#synopsis">Synopsis</a></li>

      <li><a href="#description">Description</a></li>

      <li><a href="#options">Options</a></li>

      <li><a href="#commandlineargfile">Command Line Argument
	  Files</a></li>

      <li><a href="#processing">Annotation Processing</a></li>

      <li><a href="#searching">Searching for Types</a></li>

      <li><a href="#proginterface">Programmatic Interface</a></li>

      <li><a href="#examples">Examples</a></li>

      <li><a href="#seealso">See Also</a></li>
    </ul>

    <h2><a name="synopsis">SYNOPSIS</a></h2>

    <blockquote>
      <pre>
	<b>javac</b> [ options ] [ sourcefiles ] [ classes ] [ @argfiles ]
      </pre>
      <p>Arguments may be in any order.</p>

      <blockquote>
	<dl>
	  <dt><a href="#options"><code>options</code></a></dt>

	  <dd>Command-line options.</dd>

	  <dt><code>sourcefiles</code></dt>

	  <dd>One or more source files to be compiled (such as
	    MyClass.java).</dd>

	  <dt><code>classes</code></dt>

	  <dd>One or more classes to be processed for annotations 
	    (such as MyPackage.MyClass).</dd>

	  <dt><code><a href=
		"#commandlineargfile">@argfiles</a></code></dt>

	  <dd>One or more files that lists options and source files.
	    The <code>-J</code> options are not allowed in these
	    files.</dd>
	</dl>
      </blockquote>
    </blockquote>

    <h2><a name="description">DESCRIPTION</a></h2>

    <blockquote>
      <p>The <b>javac</b> tool reads class and interface definitions,
	written in the Java programming language, and compiles them
	into bytecode class files. It can also process annotations
	in Java source files and classes.</p>

      <p>There are two ways to pass source code file names to
	<b>javac</b>:</p>

      <ul>
	<li>For a small number of source files, simply list the file
	  names on the command line.</li>

	<li>For a large number of source files, list the file names
	  in a file, separated by blanks or line breaks. Then use the
	  list file name on the <b>javac</b> command line, preceded by
	  an <b>@</b> character.</li>
      </ul>

      <p>Source code file names must have <code>.java</code>
	suffixes, class file names must have <code>.class</code>
	suffixes, and both source and class files must have root names
	that identify the class. For example, a class called
	<code>MyClass</code> would be written in a source file called
	<code>MyClass.java</code> and compiled into a bytecode class
	file called <code>MyClass.class</code>.</p>

      <p>Inner class definitions produce additional class files.
	These class files have names combining the inner and outer
	class names, such as
	<code>MyClass$MyInnerClass.class</code>.</p>

      <p>You should arrange source files in a directory tree that
	reflects their package tree. For example, if you keep all your
	source files in
	<b>C:\workspace</b>, 
	the source code for
	<code>com.mysoft.mypack.MyClass</code> should be in
	<b>C:\workspace\com\mysoft\mypack\MyClass.java</b>.</p>

      <p>By default, the compiler puts each class file in the same
	directory as its source file. You can specify a separate
	destination directory with <b>-d</b> (see <a href=
	  "#options">Options</a>, below).</p>
    </blockquote>

    <h2><a name="options">OPTIONS</a></h2>

    <blockquote>
      <p>The compiler has a set of standard options that are supported
	on the current development environment and will be supported in
	future releases. An additional set of non-standard options are
	specific to the current virtual machine and compiler
	implementations and are subject to change in the future.
	Non-standard options begin with <b>-X</b>.</p>
    </blockquote>

    <h3><a name="standard">Standard Options</a></h3>

    <blockquote>
      <dl>
	<dt><b>-A</b><i>key[=value]</i></dt>
	<dd>
	  Options to pass to annotation processors. These are 
	  not interpreted by javac directly, but are made available 
	  for use by individual processors. <i>key</i> should be 
	  one or more identifiers separated by ".".
	</dd>

	<dt><b>-cp</b> <i>path</i> or <b>-classpath</b> <i>path</i></dt>

	<dd>
	  Specify where to find user class files, and (optionally) annotation 
	  processors and source files. 
	  This classpath overrides the user class path in
	  the <b>CLASSPATH</b> environment variable. If neither
	  <b>CLASSPATH</b>, <b>-cp</b> nor <b>-classpath</b> is specified, the
	  user class path consists of the current directory. 
	  See  <a href="classpath.html">Setting the Class Path</a> for
	  more details.

	  <p>If the <b>-sourcepath</b> option is not specified, the
	    user class path is also searched for source files.</p>
	  
	  <p>If the <b>-processorpath</b> option is not specified, the 
	    classpath is also searched for annotation processors.</p>

	  <!-- ********** 11.15 classpath addition  -->
	  
	  <p>As a special convenience, a class path element containing a basename of <code>*</code> 
	    is considered equivalent to specifying a list of all the 
	    files in the directory with the extension <code>.jar</code> or <code>.JAR</code>. <br /><br />
		For example, if directory <code>foo</code> contains <code>a.jar</code> and <code>b.JAR</code>, then the 
		class path element <code>foo/*</code> is expanded to 
	      <code>A.jar;b.JAR</code>,
	      except that 
	      the order of jar files is unspecified.  All jar files in the specified 
	      directory, even hidden ones, are included in the list.  A classpath entry 
	      consisting simply of <code>*</code> expands to a list of all the jar files in the 
	      current directory.  The <code>CLASSPATH</code> environment variable, where defined, 
	      will be similarly expanded.
	      <b>Note:</b> &nbsp; Depending of the configuration of your command line environment, you
	      may have to quote the wild card character, for example, 
	      <code>javac -cp "*.jar" MyClass.java</code>.</p>
	  
	  <!-- ************ end classpath ************* -->

	</dd>

	<dt><b>-Djava.ext.dirs=</b><i>directories</i></dt>

	<dd>Override the location of installed extensions.</dd>

	<dt><b>-Djava.endorsed.dirs=</b><i>directories</i></dt>

	<dd>Override the location of endorsed standards path.</dd>

	<dt><b>-d</b> <i>directory</i></dt>

	<dd>
	  Set the destination directory for class files. The directory must 
	  already exist; <b>javac</b> will not create it. If a class is 
	  part of a package, <b>javac</b> puts the class file in a 
	  subdirectory reflecting the package name, creating directories as
	  needed. 
	  For example, if you specify 
	  <b>-d C:\myclasses</b>
	  and the class is called <code>com.mypackage.MyClass</code>, 
	  then the class file is called
	  <code>C:\myclasses\com\mypackage\MyClass.class</code>.

	  <p>If <b>-d</b> is not specified, <b>javac</b> puts each
	    class files in the same directory as the source file 
	    from which it was generated.</p>

	  <p><b>Note:</b> &nbsp; The directory specified by <b>-d</b>
	    is not automatically added to your user class path.</p>
	</dd>

	<dt><b>-deprecation</b></dt>

	<dd>
	  Show a description of each use or override of a
	  deprecated member or class. Without <b>-deprecation</b>,
	  <b>javac</b> shows a summary of the source files that use or
	  override deprecated members or classes. <b>-deprecation</b>
	  is shorthand for <b>-Xlint:deprecation</b>.
	</dd>

	<dt><b>-encoding</b> <i>encoding</i></dt>

	<dd>
	  Set the source file encoding name, such as <code>EUC-JP
	    and UTF-8</code>. If <b>-encoding</b> is not specified, the
	  platform default converter is used.
	</dd>

	<dt><b>-g</b></dt>

	<dd>Generate all debugging information, including local
	  variables. By default, only line number and source file
	  information is generated.
	</dd>

	<dt><b>-g:none</b></dt>

	<dd>Do not generate any debugging information.</dd>

	<dt><b>-g:</b><i>{keyword list}</i></dt>

	<dd>
	  Generate only some kinds of debugging information,
	  specified by a comma separated list of keywords. Valid
	  keywords are:

	  <dl>
	    <dt><b>source</b></dt>

	    <dd>Source file debugging information</dd>

	    <dt><b>lines</b></dt>

	    <dd>Line number debugging information</dd>

	    <dt><b>vars</b></dt>

	    <dd>Local variable debugging information</dd>
	  </dl>
	</dd>

	<dt><b>-help</b></dt>

	<dd>Print a synopsis of standard options.</dd>

	<dt><a name="implicit"><b>-implicit:</b></a><i>{class,none}</i></dt>
	<dd>
	  Controls the generation of class files for implicitly 
	  loaded source files. 
	  To automatically generate class files, use <b>-implicit:class</b>. To
	  suppress class file generation, use <b>-implicit:none</b>.

	  If this option is not specified, the default is to automatically generate class files.
	  In this case, the compiler will issue a warning if any such class files are generated
	  when also doing annotation processing.

	  The warning will not be issued if this option is set explicitly.

	  See <a href="#searching">Searching For Types</a>.
	</dd>

	<dt><b>-nowarn</b></dt>

	<dd>
	  Disable warning messages. This has the same meaning as
	  <b>-Xlint:none</b>.
	</dd>

	<dt><b>-proc:</b> <i>{none,only}</i></dt>
	<dd>
	  Controls whether annotation processing and/or compilation 
	  is done. <b>-proc:none</b> means that compilation
	  takes place without annotation processing.  
	  <b>-proc:only</b> means that only annotation processing
	  is done, without any subsequent compilation.
	</dd>
	
	<dt><b>-processor</b> <i>class1[,class2,class3...]</i></dt>
	<dd>
	  Names of the annotation processors to run. This bypasses 
	  the default discovery process.
	</dd>

	<dt><b>-processorpath</b> <i>path</i></dt>
	<dd>
	  Specify where to find annotation processors; if this 
	  option is not used, the classpath will be searched for 
	  processors.
	</dd>

	<dt><b>-s</b> <i>dir</i></dt>
	<dd>
	  Specify the directory where to place generated source files.
	  The directory must already exist; <b>javac</b> will not create it. 
	  If a class is part of a package, the compiler puts the source  
	  file in a subdirectory reflecting the package name, creating 
	  directories as needed. For example, if you specify 
	  <b>-s C:\mysrc</b> 
	  and the class is called 
	  <code>com.mypackage.MyClass</code>, 
	  then the source file will be placed in
	  <code>C:\mysrc\com\mypackage\MyClass.java</code>.
	</dd>

	<dt><b>-source</b> <i>release</i></dt>

	<dd>
	  Specifies the version of source code accepted. The
	  following values for <i>release</i> are allowed:
	  <dl>
	    <dt> <b>1.3</b> </dt>
	    <dd>
	      The compiler does <i>not</i> support assertions,
	      generics, or other language features introduced after
	      JDK 1.3.
	    </dd>
	    <dt><b>1.4</b> </dt>
	    <dd>
	      The compiler accepts code containing assertions,
	      which were introduced in JDK 1.4.
	    </dd>
	    <dt> <b>1.5</b> </dt>
	    <dd>
	      The compiler accepts code containing generics and
	      other language features introduced in JDK 5. 
	    </dd>
	    <dt><b>5</b></dt>
	    <dd>
	      Synonym for 1.5.
	    </dd>
	    <dt><b>1.6</b></dt>
	    <dd>
	      This is the default value.
	      No language changes were introduced in Java SE 6.
	      However, encoding errors in source files are now
	      reported as errors, instead of warnings, as previously.
	    </dd>
	    <dt><b>6</b></dt>
	    <dd>
	      Synonym for 1.6.
	    </dd>
	  </dl>
	  <p>
	  </p>
	</dd>

	<dt><a name="sourcepath"><b>-sourcepath</b></a> <i>sourcepath</i></dt>

	<dd>
	  Specify the source code path to search for class or
	  interface definitions. As with the user class path, source
	  path entries are separated by 
	  semicolons (<b>;</b>) 
	  and can be directories, JAR archives, or ZIP archives. 
	  If packages are used, the local path name within the 
	  directory or archive must reflect the package name.

	  <p><b>Note:</b> &nbsp; Classes found through the classpath
	    may be subject to automatic recompilation if their sources are
	    also found. See <a href="#searching">Searching For Types</a>.</p>
	</dd>

	<dt><b>-verbose</b></dt>

	<dd>Verbose output. This includes information about each
	  class loaded and each source file compiled.</dd>

        <dt><b>-version</b></dt>
 
        <dd>Print version information.</dd>

	<dt><a name="X"><b>-X</b></a></dt>

	<dd>Display information about non-standard options and
	  exit.</dd>
      </dl>
    </blockquote>

    <h3><a name="crosscomp-options">Cross-Compilation Options</a></h3>

    <blockquote>
      <p>By default, classes are compiled against the bootstrap and
	extension classes of the platform that <b>javac</b> shipped
	with. But <b>javac</b> also supports <i>cross-compiling</i>,
	where classes are compiled against a bootstrap and extension
	classes of a different Java platform implementation. It is
	important to use <b>-bootclasspath</b> and <b>-extdirs</b> when
	cross-compiling; see <a href=
	  "#crosscomp-example">Cross-Compilation Example</a> below.</p>

      <dl>
	<dt><b>-target</b> <i>version</i></dt>

	<dd>Generate class files that target a specified version of the
	  VM. Class files will run on the specified target and on later
	  versions, but not on earlier versions of the VM. Valid targets are
	  <b>1.1</b> <b>1.2</b> <b>1.3</b> <b>1.4</b> <b>1.5</b> (also
	  <b>5</b>) and <b>1.6</b> (also <b>6</b>). 
	  <p>
	    The default for <b>-target</b> depends on the value of
	    <b>-source</b>: 
	  </p>
	  <ul>
	    <li>
	      If -source is <b>not specified</b>, the value of -target is 
	      <b>1.6</b>
	    </li>
	    <li>
	      If -source is <b>1.2</b>, the value of -target is <b>1.4</b>
	    </li>
	    <li>
	      If -source is <b>1.3</b>, the value of -target is <b>1.4</b>
	    </li>
	    <li>
	      For <b>all other values</b> of -source, the value of -target is 
	      the value of <b>-source</b>.
	    </li>
	  </ul>
	  <p>
	  </p>
	</dd>

	<dt><b>-bootclasspath</b> <i>bootclasspath</i></dt>

	<dd>Cross-compile against the specified set of boot classes.
	  As with the user class path, boot class path entries are separated by 
	  semicolons (<b>;</b>) 
	  and can be directories, JAR archives, or ZIP archives.</dd>

	<dt><b>-extdirs</b> <i>directories</i></dt>

	<dd>Cross-compile against the specified extension
	  directories. <i>Directories</i> is a 
	  semicolon-separated 
	  list of directories. Each JAR archive in the specified 
	  directories is searched for class files.</dd>
      </dl>
    </blockquote>

    <h3><a name="nonstandard">Non-Standard Options</a></h3>

    <blockquote>
      <dl>
	<dt><b>-Xbootclasspath/p:</b><i>path</i></dt>

	<dd>Prepend to the bootstrap class path.</dd>

	<dt><b>-Xbootclasspath/a:</b><i>path</i></dt>

	<dd>Append to the bootstrap class path.</dd>

	<dt><b>-Xbootclasspath/:</b><i>path</i></dt>

	<dd>Override location of bootstrap class files.</dd>

	<dt><b>-Xlint</b></dt>

	<dd>Enable all recommended warnings. In this release, all
	  available warnings are recommended.</dd>

	<dt><b>-Xlint:none</b></dt>

	<dd>Disable all warnings not mandated by the Java Language
	  Specification.</dd>

	<dt><b>-Xlint:-</b><i>name</i></dt>

	<dd>Disable warning <i>name</i>, where <i>name</i> is one of
	  the warning names supported for <b>-Xlint:</b><i>name</i>, below.</dd>

	<dt><b>-Xlint:unchecked</b></dt>

	<dd>Give more detail for unchecked conversion warnings that
	  are mandated by the Java Language Specification.</dd>

	<dt><b>-Xlint:path</b></dt>

	<dd>Warn about nonexistent path (classpath, sourcepath, etc)
	  directories.</dd>

	<dt><b>-Xlint:serial</b></dt>

	<dd>Warn about missing <code>serialVersionUID</code>
	  definitions on serializable classes.</dd>

	<dt><b>-Xlint:finally</b></dt>

	<dd>Warn about <code>finally</code> clauses that cannot
	  complete normally.</dd>

	<dt><b>-Xlint:fallthrough</b></dt>

	<dd>
	  Check <tt>switch</tt> blocks for fall-through cases and
	  provide a warning message for any that are found.
	  Fall-through cases are cases in a <tt>switch</tt> block,
	  other than the last case in the block, whose code does not
	  include a <tt>break</tt> statement, allowing code execution
	  to "fall through" from that case to the next case. For
	  example, the code following the <tt>case 1</tt> label in
	  this <tt>switch</tt> block does not end with a
	  <tt>break</tt> statement:

	  <blockquote>
	    <pre>
switch (x) {
case 1:
       System.out.println("1");
       //  No  break;  statement here.
case 2:
       System.out.println("2");
}
	    </pre>
	  </blockquote>If the <tt>-Xlint:fallthrough</tt> flag were
	  used when compiling this code, the compiler would emit a
	  warning about "possible fall-through into case," along with
	  the line number of the case in question.
	</dd>

	<dt><b>-Xmaxerrs</b> <i>number</i></dt>

	<dd>Set the maximum number of errors to print.</dd>

	<dt><b>-Xmaxwarns</b> <i>number</i></dt>

	<dd>Set the maximum number of warnings to print.</dd>

	<dt><b>-Xstdout</b> <i>filename</i></dt>

	<dd>Send compiler messages to the named file. By default,
	  compiler messages go to <code>System.err</code>.
	</dd>

	<dt><a name="Xprefer"><b>-Xprefer:</b></a><i>{newer,source}</i> </dt>
	<dd>
	  Specify which file to read when both a source file and 
	  class file are found for a type.
	  (See <a href="#searching">Searching For Types</a>). 
	  If <i>-Xprefer:newer</i> is used, it reads the newer of the source
	  or class file for a type (default). 
	  If the <i>-Xprefer:source</i> option is used, it reads source file.
	  Use <i>-Xprefer:source</i> when you want to be sure that any annotation
	  processors can access annotations declared with a 
	  retention policy of <code>SOURCE</code>.
	</dd>

	<dt><b>-Xprint</b> </dt>
	<dd>
	  Print out textual representation of specified types for 
	  debugging purposes; perform neither annotation processing 
	  nor compilation.  The format of the output may change.
	</dd>

	<dt><b>-XprintProcessorInfo</b> </dt>
	<dd>
	  Print information about which annotations a processor 
	  is asked to process.
	</dd>

	<dt><b>-XprintRounds</b> </dt>
	<dd>
	  Print information about initial and subsequent annotation 
	  processing rounds.
	</dd>

      </dl>
    </blockquote>

    <h3><a name="J">The -J Option</a></h3>

    <blockquote>
      <dl>
	<dt><b>-J</b><i>option</i></dt>

	<dd>
	  Pass <i>option</i> to the <b>java</b> launcher called by
	  <b>javac</b>. For example, <b>-J-Xms48m</b> sets the
	  startup memory to 48 megabytes. Although it does not begin
	  with <b>-X</b>, it is not a `standard option' of
	  <b>javac</b>. It is a common convention for <b>-J</b> to
	  pass options to the underlying VM executing applications
	  written in Java.

	  <p><b>Note:</b> &nbsp; <b>CLASSPATH</b>, <b>-classpath</b>,
	    <b>-bootclasspath</b>, and <b>-extdirs</b> do <i>not</i>
	    specify the classes used to run <b>javac</b>. Fiddling with
	    the implementation of the compiler in this way is usually
	    pointless and always risky. If you do need to do this, use
	    the <b>-J</b> option to pass through options to the
	    underlying <b>java</b> launcher.
	  </p></dd>
      </dl>
    </blockquote>

    <h2><a name="commandlineargfile">COMMAND LINE ARGUMENT FILES</a></h2>

    <blockquote>
      <p>To shorten or simplify the javac command line, you can specify
	one or more files that themselves contain arguments to the
	<code>javac</code> command (except <code>-J</code> options).
	This enables you to create javac commands of any length on any
	operating system.</p>

      <p>An argument file can include javac options and source
	filenames in any combination. The arguments within a file can
	be space-separated or newline-separated. If a filename contains
	embedded spaces, put the whole filename in double quotes, and
	double each backslash (<code>"My&nbsp;Files\\Stuff.java"</code>).</p>

      <p>Filenames within an
	argument file are relative to the current directory, not the
	location of the argument file. Wildcards (*) are not allowed in
	these lists (such as for specifying <code>*.java</code>). Use
	of the '<tt>@</tt>' character to recursively interpret files is
	not supported. The <code>-J</code> options are not supported
	because they are passed to the launcher, which does not support
	argument files.</p>

      <p>When executing javac, pass in the path and name of each
	argument file with the '<tt>@</tt>' leading character. When
	javac encounters an argument beginning with the character
	`<tt>@</tt>', it expands the contents of that file into the
	argument list.</p>

      <h3>Example - Single Arg File</h3>
      <p>You could use a single
	argument file named "<code>argfile</code>" to hold all javac
	arguments:</p>
      <pre>
  C:&gt; <b>javac @argfile</b>
      </pre>
      <p>This argument file could contain the contents of both files
	shown in the next example.</p>

      <h3>Example - Two Arg Files</h3>
      <p>You can create two argument
	files -- one for the javac options and the other for the source
	filenames: (Notice the following lists have no
	line-continuation characters.)</p>

      <p>Create a file named "<code>options</code>" containing:</p>
      <pre>
     -d classes
     -g
     -sourcepath C:\java\pubs\ws\1.3\src\share\classes
      </pre>

      <p>Create a file named "<code>classes</code>" containing:</p>
      <pre>
     MyClass1.java
     MyClass2.java
     MyClass3.java
      </pre>
      <p>You would then run <b>javac</b> with:</p>
      <pre>
  C:&gt; <b>javac @options @classes</b>
      </pre>

      <h3>Example - Arg Files with Paths</h3>
      <p>The argument files can
	have paths, but any filenames inside the files are relative to
	the current working directory (not <code>path1</code> or
	<code>path2</code>):</p>
      <pre>
  C:&gt; <b>javac @path1\options @path2\classes</b>
      </pre>
    </blockquote>


    <h2><a name="processing">ANNOTATION PROCESSING</a></h2>

    <blockquote>

      <p><b>javac</b> provides direct support for annotation processing,
	superseding the need for the separate annotation processing
	tool, <b>apt</b>.</p>

      <p>The API for annotation processors is defined in the
	<code>javax.annotation.processing</code> and <code>javax.lang.model</code>
	packages and subpackages.</p>

      <h3>Overview of annotation processing</h3>

      <p>Unless annotation processing is disabled with the <b>-proc:none</b> option,
        the compiler searches for any annotation processors that are available.
        The search path can be specified with the <b>-processorpath</b> option;
        if it is not given, the user class path is used. Processors are located
        by means of service provider-configuration files named
	<code>&nbsp; META-INF/services/javax.annotation.processing.Processor</code>
	on the search path. Such files should contain the names of any annotation processors
	to be used, listed one per line. Alternatively, processors can be
	specified explicitly, using the <b>-processor</b> option.</p>
      
      <p>After scanning the source files and classes on the command line to
	determine what annotations are present, the compiler queries the
	processors to determine what annotations they process. When a match is
	found, the processor will be invoked. A processor may "claim" the
	annotations it processes, in which case no further attempt is made to
	find any processors for those annotations. Once all annotations have been
	claimed, the compiler does not look for additional processors.</p>
      
      <p>If any processors generate any new source files, another round of
	annotation processing will occur: any newly generated source files will
	be scanned, and the annotations processed as before. Any processors
	invoked on previous rounds will also be invoked on all subsequent
	rounds. This continues until no new source files are generated.</p>
      
      <p>After a round occurs where no new source files are generated, the annotation
	processors will be invoked one last time, to give them a chance to
	complete any work they may need to do. Finally, unless the <b>-proc:only</b>
	option is used, the compiler will compile the original and all the
	generated source files.</p>
      
      <h3>Implicitly loaded source files</h3>
      
      <p>To compile a set of source files, the compiler may need to
	implicitly load additional source files. 
	(See <a href="#searching">Searching For Types</a>).  
	Such files are currently not subject to annotation processing. 
	By default, the compiler will give a warning if annotation 
	processing has occurred and any implicitly loaded source files 
	are compiled. See the <a href="#implicit">-implicit</a> option 
	for ways to suppress the warning.
    </p></blockquote>

    <h2><a name="searching">SEARCHING FOR TYPES</a></h2>

    <blockquote>
      <p>When compiling a source file, the compiler often needs
	information about a type whose definition did not appear in the
	source files given on the command line. The compiler needs type
	information for every class or interface used, extended, or
	implemented in the source file. This includes classes and
	interfaces not explicitly mentioned in the source file but
	which provide information through inheritance.
      </p>

      <p>For example, when you subclass <b>java.applet.Applet</b>,
	you are also using <b>Applet's</b> ancestor classes:
	<b>java.awt.Panel</b>, <b>java.awt.Container</b>,
	<b>java.awt.Component</b>, and <b>java.lang.Object</b>.</p>

      <p>When the compiler needs type information, it looks for a
	source file or class file which defines the type. The compiler
	searches for class files first in the bootstrap and extension
	classes, then in the user class path (which by default is the
	current directory). The user class path is defined by setting
	the <b>CLASSPATH</b> environment variable or by using the
	<b>-classpath</b> command line option. (For details, see
	<a href="classpath.html">Setting the Class Path</a>).</p>

      <p>If you set the <a href="#sourcepath">-sourcepath</a> option,
	the compiler searches the indicated path for source files;
	otherwise the compiler searches the user class path for both
	class files and source files.</p>

      <p>You can specify different bootstrap or extension classes
	with the <b>-bootclasspath</b> and <b>-extdirs</b> options; see
	<a href="#crosscomp-options">Cross-Compilation Options</a>
	below.</p>

      <p>A successful type search may produce a class file, a source
	file, or both.  If both are found, you can use the 
      <a href="#Xprefer">-Xprefer</a> option to instruct the compiler
      which to use. If <b>newer</b> is given, 
      the compiler will use the newer of the two files. If <b>source</b> 
      is given, it will use the source file. The default is <b>newer</b>.</p>

      <p>If a type search finds a source file for a required type,
	either by itself, or as a result of the setting for <b>-Xprefer</b>,
	the compiler will read the source file to get the information
	it needs. In addition, it will by default compile the source file 
	as well. You can use the <a href="#implicit">-implicit</a> option
	to specify the behavior. If <b>none</b> is given, no class files
	will be generated for the source file. If <b>class</b> is given,
	class files will be generated for the source file.</p>

      <p>The compiler may not discover the need for some type information
	until after annotation processing is complete. If the type information
	is found in a source file and no <b>-implicit</b> option is given,
	the compiler will give a warning that the file is being compiled
	without being subject to annotation processing.  To disable the warning,
	either specify the file on the command line (so that it will be subject
	to annotation processing) or use the <b>-implicit</b> option to
	specify whether or not class files should be generated for such source
	files.</p>

    </blockquote>


    <h2><a name="proginterface">PROGRAMMATIC INTERFACE</a></h2>

    <blockquote>
      <p><b>javac</b> supports the new Java Compiler API defined by the classes
	and interfaces in the <code>javax.tools</code> package.</p>

      <h3>Example</h3>
      <p>To perform a compilation using arguments as you would give on the command line,
	you can use the following:</p>
      <pre>
JavaCompiler javac = ToolProvider.getSystemJavaCompiler();
int rc = javac.run(null, null, null, args);
      </pre>
      <p>This will write any diagnostics to the standard output stream, and return
	the exit code that <b>javac</b> would give when invoked from the command line.</p>

      <p>You can use other methods on the <code>javax.tools.JavaCompiler</code> interface
	to handle diagnostics, control where files are read from and written to, and so on.
      </p>
    </blockquote>

    <h3>Old Interface</h3>

    <blockquote>
      <p><b>Note:</b> &nbsp; This API is retained for backwards compatibility only; 
	all new code should use the Java Compiler API, described above.</p>

      <p>The <code>com.sun.tools.javac.Main</code> class
	provides two static methods to invoke the compiler from a
	program:</p>
      <pre>
public static int compile(String[] args);
public static int compile(String[] args, PrintWriter out);
      </pre>

      <p>The <code>args</code> parameter represents any of the command
	line arguments that would normally be passed to the javac program
	and are outlined in the above <a href="#synopsis">Synopsis</a>
	section.</p>

      <p>The <code>out</code> parameter indicates where the compiler's
	diagnostic output is directed.</p>

      <p>The return value is equivalent to the exit value from
	<b>javac</b>.</p>

      <p>Note that all <b>other</b> classes and methods found in a
	package whose name starts with <code>com.sun.tools.javac</code>
	(informally known as sub-packages of
	<code>com.sun.tools.javac</code>) are strictly internal and
	subject to change at any time.</p>
    </blockquote>

    <h2><a name="examples">EXAMPLES</a></h2>

    <h3><a name="simpleexamples">Compiling a Simple Program</a></h3>

    <blockquote>
      <p>One source file, <code>Hello.java</code>, defines a class
	called <b>greetings.Hello</b>. The <code>greetings</code>
	directory is the package directory both for the source file and
	the class file and is off the current directory. This allows us
	to use the default user class path. It also makes it
	unnecessary to specify a separate destination directory with
	<b>-d</b>.</p>

      <blockquote>
	<pre>
C:&gt; <b>dir</b>
greetings/
C:&gt; <b>dir greetings</b>
Hello.java
C:&gt; <b>cat greetings\Hello.java</b>
package greetings;

public class Hello {
    public static void main(String[] args) {
        for (int i=0; i &lt; args.length; i++) {
            System.out.println("Hello " + args[i]);
        }
    }
}
C:&gt; <b>javac greetings\Hello.java</b>
C:&gt; <b>dir greetings</b>
Hello.class   Hello.java
C:&gt; <b>java greetings.Hello World Universe Everyone</b>
Hello World
Hello Universe
Hello Everyone
	</pre>
      </blockquote>
    </blockquote>

    <h3><a name="multiple-example">Compiling Multiple Source Files</a></h3>

    <blockquote>
      <p>This example compiles all the source files in the package
	<code>greetings</code>.</p>

      <blockquote>
	<pre>
C:&gt; <b>dir</b>
greetings\
C:&gt; <b>dir greetings</b>
Aloha.java         GutenTag.java      Hello.java         Hi.java
C:&gt; <b>javac greetings\*.java</b>
C:&gt; <b>dir greetings</b>
Aloha.class         GutenTag.class      Hello.class         Hi.class
Aloha.java          GutenTag.java       Hello.java          Hi.java

	</pre>
      </blockquote>
    </blockquote>

    <h3><a name="userclasspath">Specifying a User Class Path</a></h3>

    <blockquote>
      <p>Having changed one of the source files in the previous example,
	we recompile it:</p>

      <blockquote>
	<pre>
C:&gt; <b>cd</b>
\examples
C:&gt; <b>javac greetings\Hi.java</b>
	</pre>
      </blockquote>
      <p>Since <code>greetings.Hi</code> refers to other
	classes in the <code>greetings</code> package, the compiler
	needs to find these other classes. The example above works,
	because our default user class path happens to be the directory
	containing the package directory. But suppose we want to
	recompile this file and not worry about which directory we're
	in? Then we need to add 
	<code>\examples</code> 
	to the user
	class path. We can do this by setting <b>CLASSPATH</b>, but
	here we'll use the <b>-classpath</b> option.</p>

      <blockquote>
	<pre>
C:&gt;<b>javac -classpath \examples \examples\greetings\Hi.java</b>
	</pre>
      </blockquote>
      <p>If we change <code>greetings.Hi</code> again, to
	use a banner utility, that utility also needs to be accessible
	through the user class path.</p>

      <blockquote>
	<pre>
C:&gt;<b>javac -classpath \examples;\lib\Banners.jar \
	    \examples\greetings\Hi.java</b>
	</pre>
      </blockquote>

      <p>To execute a class in <code>greetings</code>, we
	need access both to <code>greetings</code> and to the classes
	it uses.</p>

      <blockquote>
	<pre>
C:&gt;<b>java -classpath \examples;\lib\Banners.jar greetings.Hi</b>
	</pre>
      </blockquote>
    </blockquote>

    <h3><a name="separating">Separating Source Files
	and Class Files</a></h3>

    <blockquote>
      <p>It often makes sense to keep source files and class files in
	separate directories, especially on large projects. We use
	<b>-d</b> to indicate the separate class file destination.
	Since the source files are not in the user class path, we use
	<b>-sourcepath</b> to help the compiler find them.</p>

      <blockquote>
	<pre>
C:&gt; <b>dir</b>
classes\  lib\      src\
C:&gt; <b>dir src</b>
farewells\
C:&gt; <b>dir src\farewells</b>
Base.java      GoodBye.java
C:&gt; <b>dir lib</b>
Banners.jar
C:&gt; <b>dir classes</b>
C:&gt; <b>javac -sourcepath src -classpath classes;lib\Banners.jar \
	    src\farewells\GoodBye.java -d classes</b>
C:&gt; <b>dir classes</b>
farewells\
C:&gt; <b>dir classes\farewells</b>
Base.class      GoodBye.class

	</pre>
      </blockquote>
      <p><b>Note:</b> &nbsp; The compiler compiled
	<code>src\farewells\Base.java</code>, even though we didn't
	specify it on the command line. To trace automatic compiles,
	use the <b>-verbose</b> option.</p>
    </blockquote>

    <h3><a name="crosscomp-example">Cross-Compilation Example</a></h3>

    <blockquote>
      <p>Here we use <b>javac</b> to compile code that will run on a 1.5
	VM.</p>

      <blockquote>
	<pre>
% <b>javac -target 1.5 -bootclasspath jdk1.5.0\lib\rt.jar \
	    -extdirs "" OldCode.java</b>
	</pre>
      </blockquote>

      <p>The <b>-target 1.5</b> option ensures that the
	generated class files will be compatible with 1.5 VMs. By
	default, <b>javac</b> compiles for JDK 6.</p>

      <p>The Java Platform JDK's <b>javac</b> would also by default compile
	against its own bootstrap classes, so we need to tell
	<b>javac</b> to compile against JDK 1.5 bootstrap classes
	instead. We do this with <b>-bootclasspath</b> and
	<b>-extdirs</b>. Failing to do this might allow compilation
	against a Java Platform API that would not be present on a
	1.5 VM and would fail at runtime.</p>
    </blockquote>

    <h2><a name="seealso">SEE ALSO</a></h2>

    <blockquote>
      <ul>
	<li><a href="../../guides/javac/index.html">javac Guide</a></li>

	<li><a href="java.html">java - the Java Application
	    Launcher</a></li>

	<li><a href="jdb.html">jdb - Java Application
	    Debugger</a></li>

	<li><a href="javah.html">javah - C Header and Stub File
	    Generator</a></li>

	<li><a href="javap.html">javap - Class File
	    Disassembler</a></li>

	<li><a href="javadoc.html">javadoc - API Documentation
	    Generator</a></li>

	<li><a href="jar.html">jar - JAR Archive Tool</a></li>

	<li><a href="../../guides/extensions/index.html">The Java
	    Extensions Framework</a></li>
      </ul>
    </blockquote>

  


<div class="hr"><hr /></div>
<table summary="layout" border="0" width="100%">
<tr valign="TOP">
<td width="30%"> <br />
<font size="+1"> <i>Java Technology</i></font> </td>

<td width="30%">
<p><font size ="-2">
<a href="../../../legal/cpyr.html">Copyright &#169;</a> 1993, 2011, Oracle and/or its affiliates. All rights reserved.
</font></p> 
</td>
<td width="30%">
<p align="right"><font size="-2"><a href="http://download.oracle.com/javase/feedback.html">Contact Us</a></p>
</td>
</tr>
</table> 
<div class="hr"><hr /></div>
</div>

</body>
</html>
